/*!
 * /* shader-particle-engine 2.0.0
 *  * 
 *  * (c) 2020 Luke Moody (http://www.github.com/squarefeet)
 *  *     Originally based on Lee Stemkoski's original work (https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/js/ParticleEngine.js).
 *  *
 *  * shader-particle-engine may be freely distributed under the MIT license (See LICENSE at root of this repository.)
 *  * /
 * 
 */
var SPE=function(e){var t={};function r(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(i,a,function(t){return e[t]}.bind(null,a));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t){e.exports=THREE},function(e,t,r){"use strict";r.r(t),r.d(t,"Group",(function(){return x})),r.d(t,"Emitter",(function(){return _})),r.d(t,"distributions",(function(){return y})),r.d(t,"globals",(function(){return u}));var i,a,s=r(0),o="boolean",n="number",l="object",u={valueOverLifetimeLength:4},c={ensureTypedArg:(e,t,r)=>typeof e===t?e:r,ensureArrayTypedArg(e,t,r){if(Array.isArray(e)){for(var i=e.length-1;i>=0;--i)if(typeof e[i]!==t)return r;return e}return this.ensureTypedArg(e,t,r)},ensureInstanceOf:(e,t,r)=>void 0!==t&&e instanceof t?e:r,ensureArrayInstanceOf(e,t,r){if(Array.isArray(e)){for(var i=e.length-1;i>=0;--i)if(void 0!==t&&e[i]instanceof t==!1)return r;return e}return this.ensureInstanceOf(e,t,r)},ensureValueOverLifetimeCompliance(e,t,r){t=t||3,r=r||3,!1===Array.isArray(e._value)&&(e._value=[e._value]),!1===Array.isArray(e._spread)&&(e._spread=[e._spread]);var i=this.clamp(e._value.length,t,r),a=this.clamp(e._spread.length,t,r),s=Math.max(i,a);e._value.length!==s&&(e._value=this.interpolateArray(e._value,s)),e._spread.length!==s&&(e._spread=this.interpolateArray(e._spread,s))},interpolateArray(e,t){for(var r=e.length,i=["function"==typeof e[0].clone?e[0].clone():e[0]],a=(r-1)/(t-1),s=1;s<t-1;++s){var o=s*a,n=Math.floor(o),l=Math.ceil(o),u=o-n;i[s]=this.lerpTypeAgnostic(e[n],e[l],u)}return i.push("function"==typeof e[r-1].clone?e[r-1].clone():e[r-1]),i},clamp:(e,t,r)=>Math.max(t,Math.min(e,r)),zeroToEpsilon(e,t){var r=e;return r=t?1e-5*Math.random()*10:1e-5,e<0&&e>-1e-5&&(r=-r),r},lerpTypeAgnostic(e,t,r){var i;return typeof e===n&&typeof t===n?e+(t-e)*r:e instanceof s.Vector2&&t instanceof s.Vector2?((i=e.clone()).x=this.lerp(e.x,t.x,r),i.y=this.lerp(e.y,t.y,r),i):e instanceof s.Vector3&&t instanceof s.Vector3?((i=e.clone()).x=this.lerp(e.x,t.x,r),i.y=this.lerp(e.y,t.y,r),i.z=this.lerp(e.z,t.z,r),i):e instanceof s.Vector4&&t instanceof s.Vector4?((i=e.clone()).x=this.lerp(e.x,t.x,r),i.y=this.lerp(e.y,t.y,r),i.z=this.lerp(e.z,t.z,r),i.w=this.lerp(e.w,t.w,r),i):e instanceof s.Color&&t instanceof s.Color?((i=e.clone()).r=this.lerp(e.r,t.r,r),i.g=this.lerp(e.g,t.g,r),i.b=this.lerp(e.b,t.b,r),i):void console.warn("Invalid argument types, or argument types do not match:",e,t)},lerp:(e,t,r)=>e+(t-e)*r,roundToNearestMultiple(e,t){var r;return 0===t||0===(r=Math.abs(e)%t)?e:e<0?-(Math.abs(e)-r):e+t-r},arrayValuesAreEqual(e){for(var t=0;t<e.length-1;++t)if(e[t]!==e[t+1])return!1;return!0},randomFloat:(e,t)=>e+t*(Math.random()-.5),randomVector3(e,t,r,i,a){var s=r.x+(Math.random()*i.x-.5*i.x),o=r.y+(Math.random()*i.y-.5*i.y),n=r.z+(Math.random()*i.z-.5*i.z);a&&(s=.5*-a.x+this.roundToNearestMultiple(s,a.x),o=.5*-a.y+this.roundToNearestMultiple(o,a.y),n=.5*-a.z+this.roundToNearestMultiple(n,a.z)),e.typedArray.setVec3Components(t,s,o,n)},randomColor(e,t,r,i){var a=r.r+Math.random()*i.x,s=r.g+Math.random()*i.y,o=r.b+Math.random()*i.z;a=this.clamp(a,0,1),s=this.clamp(s,0,1),o=this.clamp(o,0,1),e.typedArray.setVec3Components(t,a,s,o)},randomColorAsHex:(a=new s.Color,function(e,t,r,i){for(var s=r.length,o=[],n=0;n<s;++n){var l=i[n];a.copy(r[n]),a.r+=Math.random()*l.x-.5*l.x,a.g+=Math.random()*l.y-.5*l.y,a.b+=Math.random()*l.z-.5*l.z,a.r=this.clamp(a.r,0,1),a.g=this.clamp(a.g,0,1),a.b=this.clamp(a.b,0,1),o.push(a.getHex())}e.typedArray.setVec4Components(t,o[0],o[1],o[2],o[3])}),randomVector3OnLine(e,t,r,i){var a=r.clone();a.lerp(i,Math.random()),e.typedArray.setVec3Components(t,a.x,a.y,a.z)},randomVector3OnSphere(e,t,r,i,a,s,o,n){var l=2*Math.random()-1,u=6.2832*Math.random(),c=Math.sqrt(1-l*l),h=this.randomFloat(i,a),p=0,d=0,f=0;o&&(h=Math.round(h/o)*o),p=c*Math.cos(u)*h,d=c*Math.sin(u)*h,f=l*h,p*=s.x,d*=s.y,f*=s.z,p+=r.x,d+=r.y,f+=r.z,e.typedArray.setVec3Components(t,p,d,f)},seededRandom(e){var t=1e4*Math.sin(e);return t-(0|t)},randomVector3OnDisc(e,t,r,i,a,s,o){var n=6.2832*Math.random(),l=Math.abs(this.randomFloat(i,a)),u=0,c=0,h=0;o&&(l=Math.round(l/o)*o),u=Math.cos(n)*l,c=Math.sin(n)*l,u*=s.x,c*=s.y,u+=r.x,c+=r.y,h+=r.z,e.typedArray.setVec3Components(t,u,c,h)},randomDirectionVector3OnSphere:(i=new s.Vector3,function(e,t,r,a,s,o,n,l){i.copy(o),i.x-=r,i.y-=a,i.z-=s,i.normalize().multiplyScalar(-this.randomFloat(n,l)),e.typedArray.setVec3Components(t,i.x,i.y,i.z)}),randomDirectionVector3OnDisc:function(){var e=new s.Vector3;return function(t,r,i,a,s,o,n,l){e.copy(o),e.x-=i,e.y-=a,e.z-=s,e.normalize().multiplyScalar(-this.randomFloat(n,l)),t.typedArray.setVec3Components(r,e.x,e.y,0)}}(),getPackedRotationAxis:function(){var e=new s.Vector3,t=new s.Vector3,r=new s.Color,i=new s.Vector3(1,1,1);return function(a,s){return e.copy(a).normalize(),t.copy(s).normalize(),e.x+=.5*-s.x+Math.random()*s.x,e.y+=.5*-s.y+Math.random()*s.y,e.z+=.5*-s.z+Math.random()*s.z,e.normalize().add(i).multiplyScalar(.5),r.setRGB(e.x,e.y,e.z),r.getHex()}}()};class h{constructor(e,t,r,i){this.componentSize=r||1,this.size=t||1,this.TypedArrayConstructor=e||Float32Array,this.array=new e(t*this.componentSize),this.indexOffset=i||0}setSize(e,t){const r=this.array.length;let i=e;return t||(i*=this.componentSize),i<r?this.shrink(i):i>r?this.grow(i):void console.info("TypedArray is already of size:",i+".","Will not resize.")}shrink(e){return this.array=this.array.subarray(0,e),this.size=e,this}grow(e){const t=new this.TypedArrayConstructor(e);return t.set(this.array),this.array=t,this.size=e,this}splice(e,t){const r=e*this.componentSize,i=t*this.componentSize,a=[],s=this.array,o=s.length;for(let e=0;e<o;++e)(e<r||e>=i)&&a.push(s[e]);return this.setFromArray(0,a),this}setFromArray(e,t){const r=e+t.length;return r>this.array.length?this.grow(r):r<this.array.length&&this.shrink(r),this.array.set(t,this.indexOffset+e),this}setVec2(e,t){return this.setVec2Components(e,t.x,t.y)}setVec2Components(e,t,r){const i=this.array,a=this.indexOffset+e*this.componentSize;return i[a]=t,i[a+1]=r,this}setVec3(e,t){return this.setVec3Components(e,t.x,t.y,t.z)}setVec3Components(e,t,r,i){const a=this.array,s=this.indexOffset+e*this.componentSize;return a[s]=t,a[s+1]=r,a[s+2]=i,this}setVec4(e,t){return this.setVec4Components(e,t.x,t.y,t.z,t.w)}setVec4Components(e,t,r,i,a){const s=this.array,o=this.indexOffset+e*this.componentSize;return s[o]=t,s[o+1]=r,s[o+2]=i,s[o+3]=a,this}setMat3(e,t){return this.setFromArray(this.indexOffset+e*this.componentSize,t.elements)}setMat4(e,t){return this.setFromArray(this.indexOffset+e*this.componentSize,t.elements)}setColor(e,t){return this.setVec3Components(e,t.r,t.g,t.b)}setNumber(e,t){return this.array[this.indexOffset+e*this.componentSize]=t,this}getValueAtIndex(e){return this.array[this.indexOffset+e]}getComponentValueAtIndex(e){return this.array.subarray(this.indexOffset+e*this.componentSize)}}var p={f:1,v2:2,v3:3,v4:4,c:3,m3:9,m4:16};const d=Object.prototype.hasOwnProperty;class f{constructor(e,t,r){this.type="string"==typeof e&&d.call(p,e)?e:"f",this.componentSize=p[this.type],this.arrayType=r||Float32Array,this.typedArray=null,this.bufferAttribute=null,this.dynamicBuffer=!!t,this.updateMin=0,this.updateMax=0}setUpdateRange(e,t){this.updateMin=Math.min(e*this.componentSize,this.updateMin*this.componentSize),this.updateMax=Math.max(t*this.componentSize,this.updateMax*this.componentSize)}flagUpdate(){const e=this.bufferAttribute,t=e.updateRange;t.offset=this.updateMin,t.count=Math.min(this.updateMax-this.updateMin+this.componentSize,this.typedArray.array.length),e.needsUpdate=!0}resetUpdateRange(){this.updateMin=0,this.updateMax=0}resetDynamic(){this.bufferAttribute.usage=this.dynamicBuffer?s.DynamicDrawUsage:s.StaticDrawUsage}splice(e,t){this.typedArray.splice(e,t),this.forceUpdateAll()}forceUpdateAll(){this.bufferAttribute.array=this.typedArray.array,this.bufferAttribute.updateRange.offset=0,this.bufferAttribute.updateRange.count=-1,this.bufferAttribute.usage=s.StaticDrawUsage,this.bufferAttribute.needsUpdate=!0}_ensureTypedArray(e){null!==this.typedArray&&this.typedArray.size===e*this.componentSize||(null!==this.typedArray&&this.typedArray.size!==e?this.typedArray.setSize(e):null===this.typedArray&&(this.typedArray=new h(this.arrayType,e,this.componentSize)))}_createBufferAttribute(e){if(this._ensureTypedArray(e),null!==this.bufferAttribute)return this.bufferAttribute.array=this.typedArray.array,parseFloat(s.REVISION)>=81&&(this.bufferAttribute.count=this.bufferAttribute.array.length/this.bufferAttribute.itemSize),void(this.bufferAttribute.needsUpdate=!0);this.bufferAttribute=new s.BufferAttribute(this.typedArray.array,this.componentSize),this.bufferAttribute.usage=this.dynamicBuffer?s.DynamicDrawUsage:s.StaticDrawUsage}getLength(){return null===this.typedArray?0:this.typedArray.array.length}}var m={defines:["#define PACKED_COLOR_SIZE 256.0","#define PACKED_COLOR_DIVISOR 255.0"].join("\n"),uniforms:["uniform float deltaTime;","uniform float runTime;","uniform sampler2D tex;","uniform vec4 textureAnimation;","uniform float scale;"].join("\n"),attributes:["attribute vec4 acceleration;","attribute vec3 velocity;","attribute vec4 rotation;","attribute vec3 rotationCenter;","attribute vec4 params;","attribute vec4 size;","attribute vec4 angle;","attribute vec4 color;","attribute vec4 opacity;"].join("\n"),varyings:["varying vec4 vColor;","#ifdef SHOULD_ROTATE_TEXTURE","    varying float vAngle;","#endif","#ifdef SHOULD_CALCULATE_SPRITE","    varying vec4 vSpriteSheet;","#endif"].join("\n"),branchAvoidanceFunctions:["float when_gt(float x, float y) {","    return max(sign(x - y), 0.0);","}","float when_lt(float x, float y) {","    return min( max(1.0 - sign(x - y), 0.0), 1.0 );","}","float when_eq( float x, float y ) {","    return 1.0 - abs( sign( x - y ) );","}","float when_ge(float x, float y) {","  return 1.0 - when_lt(x, y);","}","float when_le(float x, float y) {","  return 1.0 - when_gt(x, y);","}","float and(float a, float b) {","    return a * b;","}","float or(float a, float b) {","    return min(a + b, 1.0);","}"].join("\n"),unpackColor:["vec3 unpackColor( in float hex ) {","   vec3 c = vec3( 0.0 );","   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float b = mod( hex, PACKED_COLOR_SIZE );","   c.r = r / PACKED_COLOR_DIVISOR;","   c.g = g / PACKED_COLOR_DIVISOR;","   c.b = b / PACKED_COLOR_DIVISOR;","   return c;","}"].join("\n"),unpackRotationAxis:["vec3 unpackRotationAxis( in float hex ) {","   vec3 c = vec3( 0.0 );","   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float b = mod( hex, PACKED_COLOR_SIZE );","   c.r = r / PACKED_COLOR_DIVISOR;","   c.g = g / PACKED_COLOR_DIVISOR;","   c.b = b / PACKED_COLOR_DIVISOR;","   c *= vec3( 2.0 );","   c -= vec3( 1.0 );","   return c;","}"].join("\n"),floatOverLifetime:["float getFloatOverLifetime( in float positionInTime, in vec4 attr ) {","    highp float value = 0.0;","    float deltaAge = positionInTime * float( VALUE_OVER_LIFETIME_LENGTH - 1 );","    float fIndex = 0.0;","    float shouldApplyValue = 0.0;","    value += attr[ 0 ] * when_eq( deltaAge, 0.0 );","","    for( int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i ) {","       fIndex = float( i );","       shouldApplyValue = and( when_gt( deltaAge, fIndex ), when_le( deltaAge, fIndex + 1.0 ) );","       value += shouldApplyValue * mix( attr[ i ], attr[ i + 1 ], deltaAge - fIndex );","    }","","    return value;","}"].join("\n"),colorOverLifetime:["vec3 getColorOverLifetime( in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4 ) {","    vec3 value = vec3( 0.0 );","    value.x = getFloatOverLifetime( positionInTime, vec4( color1.x, color2.x, color3.x, color4.x ) );","    value.y = getFloatOverLifetime( positionInTime, vec4( color1.y, color2.y, color3.y, color4.y ) );","    value.z = getFloatOverLifetime( positionInTime, vec4( color1.z, color2.z, color3.z, color4.z ) );","    return value;","}"].join("\n"),paramFetchingFunctions:["float getAlive() {","   return params.x;","}","float getAge() {","   return params.y;","}","float getMaxAge() {","   return params.z;","}","float getWiggle() {","   return params.w;","}"].join("\n"),forceFetchingFunctions:["vec4 getPosition( in float age ) {","   return modelViewMatrix * vec4( position, 1.0 );","}","vec3 getVelocity( in float age ) {","   return velocity * age;","}","vec3 getAcceleration( in float age ) {","   return acceleration.xyz * age;","}"].join("\n"),rotationFunctions:["#ifdef SHOULD_ROTATE_PARTICLES","   mat4 getRotationMatrix( in vec3 axis, in float angle) {","       axis = normalize(axis);","       float s = sin(angle);","       float c = cos(angle);","       float oc = 1.0 - c;","","       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,","                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,","                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,","                   0.0,                                0.0,                                0.0,                                1.0);","   }","","   vec3 getRotation( in vec3 pos, in float positionInTime ) {","      if( rotation.y == 0.0 ) {","           return pos;","      }","","      vec3 axis = unpackRotationAxis( rotation.x );","      vec3 center = rotationCenter;","      vec3 translated;","      mat4 rotationMatrix;","      float angle = 0.0;","      angle += when_eq( rotation.z, 0.0 ) * rotation.y;","      angle += when_gt( rotation.z, 0.0 ) * mix( 0.0, rotation.y, positionInTime );","      translated = rotationCenter - pos;","      rotationMatrix = getRotationMatrix( axis, angle );","      return center - vec3( rotationMatrix * vec4( translated, 0.0 ) );","   }","#endif"].join("\n"),rotateTexture:["    vec2 vUv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );","","    #ifdef SHOULD_ROTATE_TEXTURE","       float x = gl_PointCoord.x - 0.5;","       float y = 1.0 - gl_PointCoord.y - 0.5;","       float c = cos( -vAngle );","       float s = sin( -vAngle );","       vUv = vec2( c * x + s * y + 0.5, c * y - s * x + 0.5 );","    #endif","","    #ifdef SHOULD_CALCULATE_SPRITE","        float framesX = vSpriteSheet.x;","        float framesY = vSpriteSheet.y;","        float columnNorm = vSpriteSheet.z;","        float rowNorm = vSpriteSheet.w;","        vUv.x = gl_PointCoord.x * framesX + columnNorm;","        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);","    #endif","","    vec4 rotatedTexture = texture2D( tex, vUv );"].join("\n")},g={vertex:[m.defines,m.uniforms,m.attributes,m.varyings,s.ShaderChunk.common,s.ShaderChunk.logdepthbuf_pars_vertex,s.ShaderChunk.fog_pars_vertex,m.branchAvoidanceFunctions,m.unpackColor,m.unpackRotationAxis,m.floatOverLifetime,m.colorOverLifetime,m.paramFetchingFunctions,m.forceFetchingFunctions,m.rotationFunctions,"void main() {","    highp float age = getAge();","    highp float alive = getAlive();","    highp float maxAge = getMaxAge();","    highp float positionInTime = (age / maxAge);","    highp float isAlive = when_gt( alive, 0.0 );","    #ifdef SHOULD_WIGGLE_PARTICLES","        float wiggleAmount = positionInTime * getWiggle();","        float wiggleSin = isAlive * sin( wiggleAmount );","        float wiggleCos = isAlive * cos( wiggleAmount );","    #endif","    vec3 vel = getVelocity( age );","    vec3 accel = getAcceleration( age );","    vec3 force = vec3( 0.0 );","    vec3 pos = vec3( position );","    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;","    force += vel;","    force *= drag;","    force += accel * age;","    pos += force;","    #ifdef SHOULD_WIGGLE_PARTICLES","        pos.x += wiggleSin;","        pos.y += wiggleCos;","        pos.z += wiggleSin;","    #endif","    #ifdef SHOULD_ROTATE_PARTICLES","        pos = getRotation( pos, positionInTime );","    #endif","    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );","    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;","    #ifdef HAS_PERSPECTIVE","        float perspective = scale / length( mvPosition.xyz );","    #else","        float perspective = 1.0;","    #endif","    float pointSizePerspective = pointSize * perspective;","    #ifdef COLORIZE","       vec3 c = isAlive * getColorOverLifetime(","           positionInTime,","           unpackColor( color.x ),","           unpackColor( color.y ),","           unpackColor( color.z ),","           unpackColor( color.w )","       );","    #else","       vec3 c = vec3(1.0);","    #endif","    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );","    vColor = vec4( c, o );","    #ifdef SHOULD_ROTATE_TEXTURE","        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );","    #endif","    #ifdef SHOULD_CALCULATE_SPRITE","        float framesX = textureAnimation.x;","        float framesY = textureAnimation.y;","        float loopCount = textureAnimation.w;","        float totalFrames = textureAnimation.z;","        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );","        float column = floor(mod( frameNumber, framesX ));","        float row = floor( (frameNumber - column) / framesX );","        float columnNorm = column / framesX;","        float rowNorm = row / framesY;","        vSpriteSheet.x = 1.0 / framesX;","        vSpriteSheet.y = 1.0 / framesY;","        vSpriteSheet.z = columnNorm;","        vSpriteSheet.w = rowNorm;","    #endif","    gl_PointSize = pointSizePerspective;","    gl_Position = projectionMatrix * mvPosition;",s.ShaderChunk.logdepthbuf_vertex,s.ShaderChunk.fog_vertex,"}"].join("\n"),fragment:[m.uniforms,s.ShaderChunk.common,s.ShaderChunk.fog_pars_fragment,s.ShaderChunk.logdepthbuf_pars_fragment,m.varyings,m.branchAvoidanceFunctions,"void main() {","    vec3 outgoingLight = vColor.xyz;","    ","    #ifdef ALPHATEST","       if ( vColor.w < float(ALPHATEST) ) discard;","    #endif",m.rotateTexture,s.ShaderChunk.logdepthbuf_fragment,"    outgoingLight = vColor.xyz * rotatedTexture.xyz;","    gl_FragColor = vec4( outgoingLight.xyz, rotatedTexture.w * vColor.w );",s.ShaderChunk.fog_fragment,"}"].join("\n")},y={BOX:1,SPHERE:2,DISC:3,LINE:4};const v=Object.prototype.hasOwnProperty;class _{constructor(e){const t=c.ensureTypedArg(e,l,{});t.position=c.ensureTypedArg(t.position,l,{}),t.velocity=c.ensureTypedArg(t.velocity,l,{}),t.acceleration=c.ensureTypedArg(t.acceleration,l,{}),t.radius=c.ensureTypedArg(t.radius,l,{}),t.drag=c.ensureTypedArg(t.drag,l,{}),t.rotation=c.ensureTypedArg(t.rotation,l,{}),t.color=c.ensureTypedArg(t.color,l,{}),t.opacity=c.ensureTypedArg(t.opacity,l,{}),t.size=c.ensureTypedArg(t.size,l,{}),t.angle=c.ensureTypedArg(t.angle,l,{}),t.wiggle=c.ensureTypedArg(t.wiggle,l,{}),t.maxAge=c.ensureTypedArg(t.maxAge,l,{}),t.onParticleSpawn&&console.warn("onParticleSpawn has been removed. Please set properties directly to alter values at runtime."),this.uuid=s.Math.generateUUID(),this.type=c.ensureTypedArg(t.type,n,y.BOX),this.position={_value:c.ensureInstanceOf(t.position.value,s.Vector3,new s.Vector3),_spread:c.ensureInstanceOf(t.position.spread,s.Vector3,new s.Vector3),_spreadClamp:c.ensureInstanceOf(t.position.spreadClamp,s.Vector3,new s.Vector3),_distribution:c.ensureTypedArg(t.position.distribution,n,this.type),_randomise:c.ensureTypedArg(t.position.randomise,o,!1),_radius:c.ensureTypedArg(t.position.radius,n,10),_radiusScale:c.ensureInstanceOf(t.position.radiusScale,s.Vector3,new s.Vector3(1,1,1)),_distributionClamp:c.ensureTypedArg(t.position.distributionClamp,n,0)},this.velocity={_value:c.ensureInstanceOf(t.velocity.value,s.Vector3,new s.Vector3),_spread:c.ensureInstanceOf(t.velocity.spread,s.Vector3,new s.Vector3),_distribution:c.ensureTypedArg(t.velocity.distribution,n,this.type),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.acceleration={_value:c.ensureInstanceOf(t.acceleration.value,s.Vector3,new s.Vector3),_spread:c.ensureInstanceOf(t.acceleration.spread,s.Vector3,new s.Vector3),_distribution:c.ensureTypedArg(t.acceleration.distribution,n,this.type),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.drag={_value:c.ensureTypedArg(t.drag.value,n,0),_spread:c.ensureTypedArg(t.drag.spread,n,0),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.wiggle={_value:c.ensureTypedArg(t.wiggle.value,n,0),_spread:c.ensureTypedArg(t.wiggle.spread,n,0)},this.rotation={_axis:c.ensureInstanceOf(t.rotation.axis,s.Vector3,new s.Vector3(0,1,0)),_axisSpread:c.ensureInstanceOf(t.rotation.axisSpread,s.Vector3,new s.Vector3),_angle:c.ensureTypedArg(t.rotation.angle,n,0),_angleSpread:c.ensureTypedArg(t.rotation.angleSpread,n,0),_static:c.ensureTypedArg(t.rotation.static,o,!1),_center:c.ensureInstanceOf(t.rotation.center,s.Vector3,this.position._value.clone()),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.maxAge={_value:c.ensureTypedArg(t.maxAge.value,n,2),_spread:c.ensureTypedArg(t.maxAge.spread,n,0)},this.color={_value:c.ensureArrayInstanceOf(t.color.value,s.Color,new s.Color),_spread:c.ensureArrayInstanceOf(t.color.spread,s.Vector3,new s.Vector3),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.opacity={_value:c.ensureArrayTypedArg(t.opacity.value,n,1),_spread:c.ensureArrayTypedArg(t.opacity.spread,n,0),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.size={_value:c.ensureArrayTypedArg(t.size.value,n,1),_spread:c.ensureArrayTypedArg(t.size.spread,n,0),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.angle={_value:c.ensureArrayTypedArg(t.angle.value,n,0),_spread:c.ensureArrayTypedArg(t.angle.spread,n,0),_randomise:c.ensureTypedArg(t.position.randomise,o,!1)},this.particleCount=c.ensureTypedArg(t.particleCount,n,100),this.duration=c.ensureTypedArg(t.duration,n,null),this.isStatic=c.ensureTypedArg(t.isStatic,o,!1),this.activeMultiplier=c.ensureTypedArg(t.activeMultiplier,n,1),this.direction=c.ensureTypedArg(t.direction,n,1),this.alive=c.ensureTypedArg(t.alive,o,!0),this.particlesPerSecond=0,this.activationIndex=0,this.attributeOffset=0,this.attributeEnd=0,this.age=0,this.activeParticleCount=0,this.group=null,this.attributes=null,this.paramsArray=null,this.resetFlags={position:c.ensureTypedArg(t.position.randomise,o,!1)||c.ensureTypedArg(t.radius.randomise,o,!1),velocity:c.ensureTypedArg(t.velocity.randomise,o,!1),acceleration:c.ensureTypedArg(t.acceleration.randomise,o,!1)||c.ensureTypedArg(t.drag.randomise,o,!1),rotation:c.ensureTypedArg(t.rotation.randomise,o,!1),rotationCenter:c.ensureTypedArg(t.rotation.randomise,o,!1),size:c.ensureTypedArg(t.size.randomise,o,!1),color:c.ensureTypedArg(t.color.randomise,o,!1),opacity:c.ensureTypedArg(t.opacity.randomise,o,!1),angle:c.ensureTypedArg(t.angle.randomise,o,!1)},this.updateFlags={},this.updateCounts={},this.updateMap={maxAge:"params",position:"position",velocity:"velocity",acceleration:"acceleration",drag:"acceleration",wiggle:"params",rotation:"rotation",size:"size",color:"color",opacity:"opacity",angle:"angle"};for(const e in this.updateMap)v.call(this.updateMap,e)&&(this.updateCounts[this.updateMap[e]]=0,this.updateFlags[this.updateMap[e]]=!1,this._createGetterSetters(this[e],e));this.bufferUpdateRanges={},this.attributeKeys=null,this.attributeCount=0,c.ensureValueOverLifetimeCompliance(this.color,u.valueOverLifetimeLength,u.valueOverLifetimeLength),c.ensureValueOverLifetimeCompliance(this.opacity,u.valueOverLifetimeLength,u.valueOverLifetimeLength),c.ensureValueOverLifetimeCompliance(this.size,u.valueOverLifetimeLength,u.valueOverLifetimeLength),c.ensureValueOverLifetimeCompliance(this.angle,u.valueOverLifetimeLength,u.valueOverLifetimeLength)}_createGetterSetters(e,t){const r=this;for(const i in e)if(v.call(e,i)){const a=i.replace("_","");Object.defineProperty(e,a,{get:function(e){return function(){return this[e]}}(i),set:function(e){return function(i){const a=r.updateMap[t],s=this[e],o=u.valueOverLifetimeLength;"_rotationCenter"===e?(r.updateFlags.rotationCenter=!0,r.updateCounts.rotationCenter=0):"_randomise"===e?r.resetFlags[a]=i:(r.updateFlags[a]=!0,r.updateCounts[a]=0),r.group._updateDefines(),this[e]=i,Array.isArray(s)&&c.ensureValueOverLifetimeCompliance(r[t],o,o)}}(i)})}}_setBufferUpdateRanges(e){this.attributeKeys=e,this.attributeCount=e.length;for(let t=this.attributeCount-1;t>=0;--t)this.bufferUpdateRanges[e[t]]={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY}}_calculatePPSValue(e){const t=this.particleCount;this.duration?this.particlesPerSecond=t/(e<this.duration?e:this.duration):this.particlesPerSecond=t/e}_setAttributeOffset(e){this.attributeOffset=e,this.activationIndex=e,this.activationEnd=e+this.particleCount}_assignValue(e,t){switch(e){case"position":this._assignPositionValue(t);break;case"velocity":case"acceleration":this._assignForceValue(t,e);break;case"size":case"opacity":this._assignAbsLifetimeValue(t,e);break;case"angle":this._assignAngleValue(t);break;case"params":this._assignParamsValue(t);break;case"rotation":this._assignRotationValue(t);break;case"color":this._assignColorValue(t)}}_assignPositionValue(e){const t=this.position,r=this.attributes.position,i=t._value,a=t._spread;switch(t._distribution){case y.BOX:c.randomVector3(r,e,i,a,t._spreadClamp);break;case y.SPHERE:c.randomVector3OnSphere(r,e,i,t._radius,t._spread.x,t._radiusScale,t._spreadClamp.x,t._distributionClamp||this.particleCount);break;case y.DISC:c.randomVector3OnDisc(r,e,i,t._radius,t._spread.x,t._radiusScale,t._spreadClamp.x);break;case y.LINE:c.randomVector3OnLine(r,e,i,a)}}_assignForceValue(e,t){const r=this[t],i=r._value,a=r._spread;let s,o,n,l,u;switch(r._distribution){case y.BOX:c.randomVector3(this.attributes[t],e,i,a);break;case y.SPHERE:s=this.attributes.position.typedArray.array,u=3*e,o=s[u],n=s[u+1],l=s[u+2],c.randomDirectionVector3OnSphere(this.attributes[t],e,o,n,l,this.position._value,r._value.x,r._spread.x);break;case y.DISC:s=this.attributes.position.typedArray.array,u=3*e,o=s[u],n=s[u+1],l=s[u+2],c.randomDirectionVector3OnDisc(this.attributes[t],e,o,n,l,this.position._value,r._value.x,r._spread.x);break;case y.LINE:c.randomVector3OnLine(this.attributes[t],e,i,a)}if("acceleration"===t){const t=c.clamp(c.randomFloat(this.drag._value,this.drag._spread),0,1);this.attributes.acceleration.typedArray.array[4*e+3]=t}}_assignAbsLifetimeValue(e,t){const r=this.attributes[t].typedArray,i=this[t];if(c.arrayValuesAreEqual(i._value)&&c.arrayValuesAreEqual(i._spread)){const t=Math.abs(c.randomFloat(i._value[0],i._spread[0]));r.setVec4Components(e,t,t,t,t)}else r.setVec4Components(e,Math.abs(c.randomFloat(i._value[0],i._spread[0])),Math.abs(c.randomFloat(i._value[1],i._spread[1])),Math.abs(c.randomFloat(i._value[2],i._spread[2])),Math.abs(c.randomFloat(i._value[3],i._spread[3])))}_assignAngleValue(e){const t=this.attributes.angle.typedArray,r=this.angle;if(c.arrayValuesAreEqual(r._value)&&c.arrayValuesAreEqual(r._spread)){const i=c.randomFloat(r._value[0],r._spread[0]);t.setVec4Components(e,i,i,i,i)}else t.setVec4Components(e,c.randomFloat(r._value[0],r._spread[0]),c.randomFloat(r._value[1],r._spread[1]),c.randomFloat(r._value[2],r._spread[2]),c.randomFloat(r._value[3],r._spread[3]))}_assignParamsValue(e){this.attributes.params.typedArray.setVec4Components(e,this.isStatic?1:0,0,Math.abs(c.randomFloat(this.maxAge._value,this.maxAge._spread)),c.randomFloat(this.wiggle._value,this.wiggle._spread))}_assignRotationValue(e){this.attributes.rotation.typedArray.setVec3Components(e,c.getPackedRotationAxis(this.rotation._axis,this.rotation._axisSpread),c.randomFloat(this.rotation._angle,this.rotation._angleSpread),this.rotation._static?0:1),this.attributes.rotationCenter.typedArray.setVec3(e,this.rotation._center)}_assignColorValue(e){c.randomColorAsHex(this.attributes.color,e,this.color._value,this.color._spread)}_resetParticle(e){const t=this.resetFlags,r=this.updateFlags,i=this.updateCounts,a=this.attributeKeys;let s,o;for(let n=this.attributeCount-1;n>=0;--n)s=a[n],o=r[s],!0!==t[s]&&!0!==o||(this._assignValue(s,e),this._updateAttributeUpdateRange(s,e),!0===o&&i[s]===this.particleCount?(r[s]=!1,i[s]=0):1==o&&++i[s])}_updateAttributeUpdateRange(e,t){var r=this.bufferUpdateRanges[e];r.min=Math.min(t,r.min),r.max=Math.max(t,r.max)}_resetBufferRanges(){const e=this.bufferUpdateRanges,t=this.bufferUpdateKeys;let r,i=this.bufferUpdateCount-1;for(;i>=0;--i)r=t[i],e[r].min=Number.POSITIVE_INFINITY,e[r].max=Number.NEGATIVE_INFINITY}_onRemove(){this.particlesPerSecond=0,this.attributeOffset=0,this.activationIndex=0,this.activeParticleCount=0,this.group=null,this.attributes=null,this.paramsArray=null,this.age=0}_decrementParticleCount(){--this.activeParticleCount}_incrementParticleCount(){++this.activeParticleCount}_checkParticleAges(e,t,r,i){for(let a,s,o,n,l=t-1;l>=e;--l)a=4*l,n=r[a],0!==n&&(o=r[a+1],s=r[a+2],1===this.direction?(o+=i,o>=s&&(o=0,n=0,this._decrementParticleCount())):(o-=i,o<=0&&(o=s,n=0,this._decrementParticleCount())),r[a]=n,r[a+1]=o,this._updateAttributeUpdateRange("params",l))}_activateParticles(e,t,r,i){const a=this.direction;for(let s,o,n=e;n<t;++n)s=4*n,0!=r[s]&&1!==this.particleCount||(this._incrementParticleCount(),r[s]=1,this._resetParticle(n),o=i*(n-e),r[s+1]=-1===a?r[s+2]-o:o,this._updateAttributeUpdateRange("params",n))}tick(e){if(this.isStatic)return;null===this.paramsArray&&(this.paramsArray=this.attributes.params.typedArray.array);const t=this.attributeOffset,r=t+this.particleCount,i=this.paramsArray,a=this.particlesPerSecond*this.activeMultiplier*e,s=this.activationIndex;if(this._resetBufferRanges(),this._checkParticleAges(t,r,i,e),!1===this.alive)return void(this.age=0);if(null!==this.duration&&this.age>this.duration)return this.alive=!1,void(this.age=0);const o=1===this.particleCount?s:0|s,n=Math.min(o+a,this.activationEnd),l=n-this.activationIndex|0,u=l>0?e/l:0;this._activateParticles(o,n,i,u),this.activationIndex+=a,this.activationIndex>r&&(this.activationIndex=t),this.age+=e}reset(e){if(this.age=0,this.alive=!1,!0===e){const e=this.attributeOffset,t=e+this.particleCount,r=this.paramsArray,i=this.attributes.params.bufferAttribute;for(let i,a=t-1;a>=e;--a)i=4*a,r[i]=0,r[i+1]=0;i.updateRange.offset=0,i.updateRange.count=-1,i.needsUpdate=!0}return this}enable(){return this.alive=!0,this}disable(){return this.alive=!1,this}remove(){return null!==this.group?this.group.removeEmitter(this):console.error("Emitter does not belong to a group, cannot remove."),this}}const A=Object.prototype.hasOwnProperty;class x{constructor(e){const t=c.ensureTypedArg(e,l,{});t.texture=c.ensureTypedArg(t.texture,l,{}),this.uuid=s.Math.generateUUID(),this.fixedTimeStep=c.ensureTypedArg(t.fixedTimeStep,n,.016),this.texture=c.ensureInstanceOf(t.texture.value,s.Texture,null),this.textureFrames=c.ensureInstanceOf(t.texture.frames,s.Vector2,new s.Vector2(1,1)),this.textureFrameCount=c.ensureTypedArg(t.texture.frameCount,n,this.textureFrames.x*this.textureFrames.y),this.textureLoop=c.ensureTypedArg(t.texture.loop,n,1),this.textureFrames.max(new s.Vector2(1,1)),this.hasPerspective=c.ensureTypedArg(t.hasPerspective,o,!0),this.colorize=c.ensureTypedArg(t.colorize,o,!0),this.maxParticleCount=c.ensureTypedArg(t.maxParticleCount,n,null),this.blending=c.ensureTypedArg(t.blending,n,s.AdditiveBlending),this.transparent=c.ensureTypedArg(t.transparent,o,!0),this.alphaTest=parseFloat(c.ensureTypedArg(t.alphaTest,n,0)),this.depthWrite=c.ensureTypedArg(t.depthWrite,o,!1),this.depthTest=c.ensureTypedArg(t.depthTest,o,!0),this.fog=c.ensureTypedArg(t.fog,o,!0),this.scale=c.ensureTypedArg(t.scale,n,300),this.emitters=[],this.emitterIDs=[],this._pool=[],this._poolCreationSettings=null,this._createNewWhenPoolEmpty=0,this._attributesNeedRefresh=!1,this._attributesNeedDynamicReset=!1,this.particleCount=0,this.uniforms={tex:{type:"t",value:this.texture},textureAnimation:{type:"v4",value:new s.Vector4(this.textureFrames.x,this.textureFrames.y,this.textureFrameCount,Math.max(Math.abs(this.textureLoop),1))},fogColor:{type:"c",value:this.fog?new s.Color:null},fogNear:{type:"f",value:10},fogFar:{type:"f",value:200},fogDensity:{type:"f",value:.5},deltaTime:{type:"f",value:0},runTime:{type:"f",value:0},scale:{type:"f",value:this.scale}},this.defines={HAS_PERSPECTIVE:this.hasPerspective,COLORIZE:this.colorize,VALUE_OVER_LIFETIME_LENGTH:u.valueOverLifetimeLength,SHOULD_ROTATE_TEXTURE:!1,SHOULD_ROTATE_PARTICLES:!1,SHOULD_WIGGLE_PARTICLES:!1,SHOULD_CALCULATE_SPRITE:this.textureFrames.x>1||this.textureFrames.y>1},this.attributes={position:new f("v3",!0),acceleration:new f("v4",!0),velocity:new f("v3",!0),rotation:new f("v4",!0),rotationCenter:new f("v3",!0),params:new f("v4",!0),size:new f("v4",!0),angle:new f("v4",!0),color:new f("v4",!0),opacity:new f("v4",!0)},this.attributeKeys=Object.keys(this.attributes),this.attributeCount=this.attributeKeys.length,this.material=new s.ShaderMaterial({uniforms:this.uniforms,vertexShader:g.vertex,fragmentShader:g.fragment,blending:this.blending,transparent:this.transparent,alphaTest:this.alphaTest,depthWrite:this.depthWrite,depthTest:this.depthTest,defines:this.defines,fog:this.fog}),this.geometry=new s.BufferGeometry,this.mesh=new s.Points(this.geometry,this.material),null===this.maxParticleCount&&console.warn("SPE.Group: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.")}_updateDefines(){const e=this.emitters,t=this.defines;let r,i=e.length-1;for(;i>=0;--i)r=e[i],t.SHOULD_CALCULATE_SPRITE||(t.SHOULD_ROTATE_TEXTURE=t.SHOULD_ROTATE_TEXTURE||!!Math.max(Math.max.apply(null,r.angle.value),Math.max.apply(null,r.angle.spread))),t.SHOULD_ROTATE_PARTICLES=t.SHOULD_ROTATE_PARTICLES||!!Math.max(r.rotation.angle,r.rotation.angleSpread),t.SHOULD_WIGGLE_PARTICLES=t.SHOULD_WIGGLE_PARTICLES||!!Math.max(r.wiggle.value,r.wiggle.spread);this.material.needsUpdate=!0}_applyAttributesToGeometry(){const e=this.attributes,t=this.geometry,r=t.attributes;let i,a;for(const s in e)A.call(e,s)&&(i=e[s],a=r[s],a?a.array=i.typedArray.array:t.addAttribute(s,i.bufferAttribute),i.bufferAttribute.needsUpdate=!0);this.geometry.setDrawRange(0,this.particleCount)}addEmitter(e){if(e instanceof _==!1)return void console.error("`emitter` argument must be instance of Emitter. Was provided with:",e);if(this.emitterIDs.indexOf(e.uuid)>-1)return void console.error("Emitter already exists in this group. Will not add again.");if(null!==e.group)return void console.error("Emitter already belongs to another group. Will not add to requested group.");const t=this.attributes,r=this.particleCount,i=r+e.particleCount;this.particleCount=i,null!==this.maxParticleCount&&this.particleCount>this.maxParticleCount&&console.warn("SPE.Group: maxParticleCount exceeded. Requesting",this.particleCount,"particles, can support only",this.maxParticleCount),e._calculatePPSValue(e.maxAge._value+e.maxAge._spread),e._setBufferUpdateRanges(this.attributeKeys),e._setAttributeOffset(r),e.group=this,e.attributes=this.attributes;for(const e in t)A.call(t,e)&&t[e]._createBufferAttribute(null!==this.maxParticleCount?this.maxParticleCount:this.particleCount);for(let t=r;t<i;++t)e._assignPositionValue(t),e._assignForceValue(t,"velocity"),e._assignForceValue(t,"acceleration"),e._assignAbsLifetimeValue(t,"opacity"),e._assignAbsLifetimeValue(t,"size"),e._assignAngleValue(t),e._assignRotationValue(t),e._assignParamsValue(t),e._assignColorValue(t);return this._applyAttributesToGeometry(),this.emitters.push(e),this.emitterIDs.push(e.uuid),this._updateDefines(e),this.material.needsUpdate=!0,this.geometry.needsUpdate=!0,this._attributesNeedRefresh=!0,this}removeEmitter(e){const t=this.emitterIDs.indexOf(e.uuid);if(e instanceof _==!1)return void console.error("`emitter` argument must be instance of SPE.Emitter. Was provided with:",e);if(-1===t)return void console.error("Emitter does not exist in this group. Will not remove.");const r=e.attributeOffset,i=r+e.particleCount,a=this.attributes.params.typedArray;for(let e=r;e<i;++e)a.array[4*e]=0,a.array[4*e+1]=0;this.emitters.splice(t,1),this.emitterIDs.splice(t,1);for(const e in this.attributes)A.call(this.attributes,e)&&this.attributes[e].splice(r,i);this.particleCount-=e.particleCount,e._onRemove(),this._attributesNeedRefresh=!0}getFromPool(){const e=this._pool,t=this._createNewWhenPoolEmpty;if(e.length)return e.pop();if(t){const e=new _(this._poolCreationSettings);return this.addEmitter(e),e}return null}releaseIntoPool(e){if(e instanceof _!=!1)return e.reset(),this._pool.unshift(e),this;console.error("Argument is not instanceof Emitter:",e)}getPool(){return this._pool}addPool(e,t,r){this._poolCreationSettings=t,this._createNewWhenPoolEmpty=!!r;for(let r=0;r<e;++r){let e;e=Array.isArray(t)?t[r]:t;const i=new _(e);this.addEmitter(i),this.releaseIntoPool(i)}return this}_triggerSingleEmitter(e){const t=this.getFromPool();if(null!==t)return e instanceof s.Vector3&&(t.position.value.copy(e),t.position.value=t.position.value),t.enable(),setTimeout(()=>{t.disable(),this.releaseIntoPool(t)},1e3*Math.max(t.duration,t.maxAge.value+t.maxAge.spread)),this;console.log("Group pool ran out.")}triggerPoolEmitter(e,t){if("number"==typeof e&&e>1)for(let r=0;r<e;++r)this._triggerSingleEmitter(t);else this._triggerSingleEmitter(t);return this}_updateUniforms(e){this.uniforms.runTime.value+=e,this.uniforms.deltaTime.value=e}_resetBufferRanges(){const e=this.attributeKeys,t=this.attributes;let r=this.attributeCount-1;for(;r>=0;--r)t[e[r]].resetUpdateRange()}_updateBuffers(e){const t=this.attributeKeys,r=this.attributes,i=e.bufferUpdateRanges;let a,s,o;for(let e=this.attributeCount-1;e>=0;--e)a=t[e],s=i[a],o=r[a],o.setUpdateRange(s.min,s.max),o.flagUpdate()}tick(e){const t=this.emitters,r=t.length,i=e||this.fixedTimeStep,a=this.attributeKeys,s=this.attributes;if(this._updateUniforms(i),this._resetBufferRanges(),0!==r||!1!==this._attributesNeedRefresh||!1!==this._attributesNeedDynamicReset){for(let e,a=0;a<r;++a)e=t[a],e.tick(i),this._updateBuffers(e);if(!0===this._attributesNeedDynamicReset){for(let e=this.attributeCount-1;e>=0;--e)s[a[e]].resetDynamic();this._attributesNeedDynamicReset=!1}if(!0===this._attributesNeedRefresh){for(let e=this.attributeCount-1;e>=0;--e)s[a[e]].forceUpdateAll();this._attributesNeedRefresh=!1,this._attributesNeedDynamicReset=!0}}}dispose(){return this.geometry.dispose(),this.material.dispose(),this}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,